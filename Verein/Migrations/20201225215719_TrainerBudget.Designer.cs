// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Verein.Data;

namespace Verein.Migrations
{
    [DbContext(typeof(VereinDbContext))]
    [Migration("20201225215719_TrainerBudget")]
    partial class TrainerBudget
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Verein.Models.Arbeitseinsatz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Datum")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Taetigkeit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Arbeitseinsaetze");
                });

            modelBuilder.Entity("Verein.Models.BankInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KontoInhaber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Zahlungsinformationen");
                });

            modelBuilder.Entity("Verein.Models.Familie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Familien");
                });

            modelBuilder.Entity("Verein.Models.Gegenstand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Inventar");
                });

            modelBuilder.Entity("Verein.Models.Helfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ArbeitseinsatzId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Dauer")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TeilnehmerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArbeitseinsatzId");

                    b.HasIndex("TeilnehmerId");

                    b.ToTable("Helfer");
                });

            modelBuilder.Entity("Verein.Models.Hund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BesitzerId")
                        .HasColumnType("integer");

                    b.Property<string>("ChipNummer")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Geburtsdatum")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Geimpft")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Versichert")
                        .HasColumnType("boolean");

                    b.Property<string>("Zwingername")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BesitzerId");

                    b.ToTable("Hunde");
                });

            modelBuilder.Entity("Verein.Models.HundevereinUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Rolle")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Verein.Models.Kurs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Bis")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Enddatum")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Startdatum")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Von")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Wochentag")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Kurse");
                });

            modelBuilder.Entity("Verein.Models.KursTeilnehmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("KurseId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeilnehmerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KurseId");

                    b.HasIndex("TeilnehmerId");

                    b.ToTable("KursTeilnehmer");
                });

            modelBuilder.Entity("Verein.Models.Mitglied", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("Austrittsdatum")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Bemerkung")
                        .HasColumnType("text");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<DateTime>("Eintrittsdatum")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Entfernung")
                        .HasColumnType("double precision");

                    b.Property<int?>("FamilieId")
                        .HasColumnType("integer");

                    b.Property<bool>("Familienmitgliedschaft")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Geburtstag")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HandyNummer")
                        .HasColumnType("text");

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MitgliedsNummer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Passiv")
                        .HasColumnType("boolean");

                    b.Property<string>("Postleitzahl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Strasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SwhvMitgliedsNummer")
                        .HasColumnType("text");

                    b.Property<string>("Telefonnummer")
                        .HasColumnType("text");

                    b.Property<int>("Typ")
                        .HasColumnType("integer");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<int?>("ZahlungsInfoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FamilieId");

                    b.HasIndex("ZahlungsInfoId");

                    b.ToTable("Mitglieder");
                });

            modelBuilder.Entity("Verein.Models.StammdatenEintrag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stammdaten");
                });

            modelBuilder.Entity("Verein.Models.Tarif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tarife");
                });

            modelBuilder.Entity("Verein.Models.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("KursTrainerId")
                        .HasColumnType("integer");

                    b.Property<int?>("KurseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KursTrainerId");

                    b.HasIndex("KurseId");

                    b.ToTable("Trainer");
                });

            modelBuilder.Entity("Verein.Models.TrainerBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Betrag")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerBudget");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Verein.Models.HundevereinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Verein.Models.HundevereinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verein.Models.HundevereinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Verein.Models.HundevereinUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Verein.Models.Helfer", b =>
                {
                    b.HasOne("Verein.Models.Arbeitseinsatz", "Arbeitseinsatz")
                        .WithMany("Helfer")
                        .HasForeignKey("ArbeitseinsatzId");

                    b.HasOne("Verein.Models.Mitglied", "Teilnehmer")
                        .WithMany("Arbeitsstunden")
                        .HasForeignKey("TeilnehmerId");

                    b.Navigation("Arbeitseinsatz");

                    b.Navigation("Teilnehmer");
                });

            modelBuilder.Entity("Verein.Models.Hund", b =>
                {
                    b.HasOne("Verein.Models.Mitglied", "Besitzer")
                        .WithMany("Hunde")
                        .HasForeignKey("BesitzerId");

                    b.Navigation("Besitzer");
                });

            modelBuilder.Entity("Verein.Models.KursTeilnehmer", b =>
                {
                    b.HasOne("Verein.Models.Kurs", "Kurse")
                        .WithMany("Teilnehmer")
                        .HasForeignKey("KurseId");

                    b.HasOne("Verein.Models.Mitglied", "Teilnehmer")
                        .WithMany("Kurse")
                        .HasForeignKey("TeilnehmerId");

                    b.Navigation("Kurse");

                    b.Navigation("Teilnehmer");
                });

            modelBuilder.Entity("Verein.Models.Mitglied", b =>
                {
                    b.HasOne("Verein.Models.Familie", "Familie")
                        .WithMany("Mitglieder")
                        .HasForeignKey("FamilieId");

                    b.HasOne("Verein.Models.BankInformation", "ZahlungsInfo")
                        .WithMany("Besitzer")
                        .HasForeignKey("ZahlungsInfoId");

                    b.Navigation("Familie");

                    b.Navigation("ZahlungsInfo");
                });

            modelBuilder.Entity("Verein.Models.Trainer", b =>
                {
                    b.HasOne("Verein.Models.Mitglied", "KursTrainer")
                        .WithMany()
                        .HasForeignKey("KursTrainerId");

                    b.HasOne("Verein.Models.Kurs", "Kurse")
                        .WithMany("Trainer")
                        .HasForeignKey("KurseId");

                    b.Navigation("Kurse");

                    b.Navigation("KursTrainer");
                });

            modelBuilder.Entity("Verein.Models.TrainerBudget", b =>
                {
                    b.HasOne("Verein.Models.Trainer", "Trainer")
                        .WithMany("TrainerBudget")
                        .HasForeignKey("TrainerId");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Verein.Models.Arbeitseinsatz", b =>
                {
                    b.Navigation("Helfer");
                });

            modelBuilder.Entity("Verein.Models.BankInformation", b =>
                {
                    b.Navigation("Besitzer");
                });

            modelBuilder.Entity("Verein.Models.Familie", b =>
                {
                    b.Navigation("Mitglieder");
                });

            modelBuilder.Entity("Verein.Models.Kurs", b =>
                {
                    b.Navigation("Teilnehmer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Verein.Models.Mitglied", b =>
                {
                    b.Navigation("Arbeitsstunden");

                    b.Navigation("Hunde");

                    b.Navigation("Kurse");
                });

            modelBuilder.Entity("Verein.Models.Trainer", b =>
                {
                    b.Navigation("TrainerBudget");
                });
#pragma warning restore 612, 618
        }
    }
}
